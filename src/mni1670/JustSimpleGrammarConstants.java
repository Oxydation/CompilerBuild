/* Generated By:JavaCC: Do not edit this line. JustSimpleGrammarConstants.java */
package mni1670;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JustSimpleGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int NO_RETURN_TYPE = 7;
  /** RegularExpression Id. */
  int INT_TYPE = 8;
  /** RegularExpression Id. */
  int BOOLEAN_TYPE = 9;
  /** RegularExpression Id. */
  int WHILE = 10;
  /** RegularExpression Id. */
  int IF = 11;
  /** RegularExpression Id. */
  int ELSE = 12;
  /** RegularExpression Id. */
  int RETURN = 13;
  /** RegularExpression Id. */
  int PROGRAM = 14;
  /** RegularExpression Id. */
  int BY_REF = 15;
  /** RegularExpression Id. */
  int TRUE = 16;
  /** RegularExpression Id. */
  int FALSE = 17;
  /** RegularExpression Id. */
  int NEW = 18;
  /** RegularExpression Id. */
  int OPEN = 19;
  /** RegularExpression Id. */
  int CLOSE = 20;
  /** RegularExpression Id. */
  int SEPERATOR = 21;
  /** RegularExpression Id. */
  int STATEMENT_CLOSE = 22;
  /** RegularExpression Id. */
  int ASSIGNMENT = 23;
  /** RegularExpression Id. */
  int BRACE_OPEN = 24;
  /** RegularExpression Id. */
  int BRACE_CLOSE = 25;
  /** RegularExpression Id. */
  int BRACETS_OPEN = 26;
  /** RegularExpression Id. */
  int BRACETS_CLOSE = 27;
  /** RegularExpression Id. */
  int ACCESS = 28;
  /** RegularExpression Id. */
  int OR = 29;
  /** RegularExpression Id. */
  int AND = 30;
  /** RegularExpression Id. */
  int NOT = 31;
  /** RegularExpression Id. */
  int NOT_EQUAL = 32;
  /** RegularExpression Id. */
  int EQUAL = 33;
  /** RegularExpression Id. */
  int LESS = 34;
  /** RegularExpression Id. */
  int GREATER = 35;
  /** RegularExpression Id. */
  int LESS_OR_EQUAL = 36;
  /** RegularExpression Id. */
  int GREATER_OR_EQUAL = 37;
  /** RegularExpression Id. */
  int PLUS = 38;
  /** RegularExpression Id. */
  int MINUS = 39;
  /** RegularExpression Id. */
  int MUL = 40;
  /** RegularExpression Id. */
  int DIV = 41;
  /** RegularExpression Id. */
  int NUMBER = 42;
  /** RegularExpression Id. */
  int DIGIT = 43;
  /** RegularExpression Id. */
  int IDENTIFIER = 44;
  /** RegularExpression Id. */
  int LETTER = 45;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"void\"",
    "\"int\"",
    "\"boolean\"",
    "\"while\"",
    "\"if\"",
    "\"else\"",
    "\"return\"",
    "\"program\"",
    "\"byref\"",
    "\"true\"",
    "\"false\"",
    "\"new\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\";\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\"||\"",
    "\"&&\"",
    "\"!\"",
    "\"!=\"",
    "\"==\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "<NUMBER>",
    "<DIGIT>",
    "<IDENTIFIER>",
    "<LETTER>",
  };

}
