/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  LOOKAHEAD= 2;


  static = false;
}

PARSER_BEGIN(JustSimpleGrammar)
package mni1670;
import java.io.FileInputStream;

public class JustSimpleGrammar
{
  public static void main(String args []) throws ParseException
  {
    try
    {
      JustSimpleGrammar parser = new JustSimpleGrammar(new FileInputStream("code.txt"));
      while (true)
      {
        System.out.println("Reading ...");
        try
        {
          switch (parser.start())
          {
            case 0 : 
            break;
            case 1 : 
            System.out.println("Finished");
            break;
          }
        }
        catch (Exception e)
        {
          System.out.println("Could not parse input.");
          System.out.println(e.getMessage());
          break;
        }
        catch (Error e)
        {
          System.out.println("Oops.");
          System.out.println(e.getMessage());
          break;
        }
      }
    }
    catch (Exception ex)
    {
      System.out.println("Something went wrong: " + ex.getMessage());
    }	
  }
}

PARSER_END(JustSimpleGrammar)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

/* Keywords */
TOKEN :
{
  < NO_RETURN_TYPE : "void" >
| < INT_TYPE : "int" >
| < BOOLEAN_TYPE : "boolean" >
| < WHILE : "while" >
| < IF : "if" >
| < ELSE : "else" >
| < RETURN : "return" >
| < PROGRAM : "program" >
| < BY_REF : "byref" >
| < TRUE : "true" >
| < FALSE : "false" >
| < NEW : "new" >
}

/* OPERATORS*/
TOKEN :
{
  < OPEN : "{" >
| < CLOSE : "}" >
| < SEPERATOR : "," >
| < STATEMENT_CLOSE : ";" >
| < ASSIGNMENT : "=" >
| < BRACE_OPEN : "(" >
| < BRACE_CLOSE : ")" >
| < BRACETS_OPEN : "[" >
| < BRACETS_CLOSE : "]" >
| < ACCESS : "." >
| < OR : "||" >
| < AND : "&&" >
| < NOT : "!" >
| < NOT_EQUAL : "!=" >
| < EQUAL : "==" >
| < LESS : "<" >
| < GREATER : ">" >
| < LESS_OR_EQUAL : "<=" >
| < GREATER_OR_EQUAL : ">=" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MUL : "*" >
| < DIV : "/" >
}

TOKEN : /* Letters and numbers */
{
  < NUMBER :
    (< DIGIT >)+
  |
    (
      (< DIGIT >)* < ACCESS > (< DIGIT >)*
    ) >
| < #DIGIT : [ "0"-"9" ] >
| < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "a"-"z", "A"-"Z" ] >
}

int start() :
{}
{
  compilationUnit() < EOF >
  {
    return 0;
  }
| < EOF >
  {
    return 1;
  }
}

void compilationUnit() :
{}
{
  < PROGRAM > < IDENTIFIER > < OPEN > definition() < CLOSE >
}

void definition() :
{}
{
  (
    LOOKAHEAD(3)
    varDef()
  | funcDef()
  )*
}

void type() :
{}
{
  < NO_RETURN_TYPE >
| < INT_TYPE >
  [
    < BRACETS_OPEN > [ < NUMBER > ] < BRACETS_CLOSE >
  ]
| < BOOLEAN_TYPE >
}

void init() :
{}
{
  < ASSIGNMENT >
  (
    < NUMBER >
  | < TRUE >
  | < FALSE >
  | arrayInit()
  )
}

void arrayInit() :
{}
{
  < NEW > type()
}

void varDef() :
{}
{
  type() < IDENTIFIER > [ init() ] < STATEMENT_CLOSE >
}

void funcDef() :
{}
{
  funcHead() block()
}

void funcHead() :
{}
{
  type() < IDENTIFIER > < BRACE_OPEN > [ formParList() ] < BRACE_CLOSE >
}

void formParList() :
{
}
{
  [ < BY_REF > ] type() < IDENTIFIER >
  (
    < SEPERATOR > [ < BY_REF > ] type() < IDENTIFIER >
  )*
}

void block() :
{
}
{
  < OPEN >
  (
    varDef()
  | stat()
  )*
  < CLOSE >	
}

void stat() :
{}
{
  assignStat()
| callStat()
| ifStat()
| whileStat()
| returnStat()
| block()
| < STATEMENT_CLOSE >
}

void assignStat() :
{}
{
  < IDENTIFIER > < ASSIGNMENT > expr() < STATEMENT_CLOSE >
}

void callStat() :
{}
{
  (
    call() < STATEMENT_CLOSE >
  )
}

void call() :
{}
{
  < IDENTIFIER > < BRACE_OPEN > [ actParList() ] < BRACE_CLOSE >
}

void actParList() :
{}
{
  expr()
  (
    < SEPERATOR > expr()
  )*
}

void ifStat() :
{
}
{
  < IF > < BRACE_OPEN > expr() < BRACE_CLOSE > stat() [ < ELSE > stat() ]
}

void whileStat() :
{}
{
  < WHILE > < BRACE_OPEN > expr() < BRACE_CLOSE > stat()
}

void returnStat() :
{}
{
  < RETURN > [ expr() ] < STATEMENT_CLOSE >	
}

void expr() :
{}
{
  orExpr()
}

void orExpr() :
{}
{
  andExpr()
  (
    < OR > andExpr()
  )*
}

void andExpr() :
{}
{
  relExpr()
  (
    < AND > relExpr()
  )*
}

void relExpr() :
{
}
{
  simpleExpr()
  [
    (
      < EQUAL >
    | < NOT_EQUAL >
    | < LESS >
    | < LESS_OR_EQUAL >
    | < GREATER >
    | < GREATER_OR_EQUAL >
    )
    simpleExpr()
  ]
}

void simpleExpr() :
{}
{
  [
    < PLUS >
  | < MINUS >
  ]
  term()
  (
    (
      < PLUS >
    | < MINUS >
    )
    term()
  )*
}

void term() :
{}
{
  notFact()
  (
    (
      < MUL >
    | < DIV >
    )
    notFact()
  )*
}

void notFact() :
{}
{
  [ < NOT > ] fact()
}

void fact() :
{}
{
  < NUMBER >
| < IDENTIFIER >
  [
    < BRACE_OPEN > [ actParList() ] < BRACE_CLOSE >
  ]
  [
    < BRACETS_OPEN >
    (
      < IDENTIFIER >
    | < NUMBER >
    )
    < BRACETS_CLOSE >
  ]
  (
  < ACCESS > < IDENTIFIER >)*
| < BRACE_OPEN > expr() < BRACE_CLOSE >
}
